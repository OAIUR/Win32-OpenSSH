name: Publish to WinGet

on:
  release:
    types: [released]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions: read-all

    steps:
      - name: Extract version from tag
        id: extract_version
        run: |
          version=$(echo "${{ github.event.release.tag_name }}" | grep -oP "(?<=v)[\d.]+")
          echo "version=$version" >> $GITHUB_OUTPUT
      - uses: vedantmgoyal9/winget-releaser@b87a066d9e624db1394edcd947f8c4e5a7e30cd7
        with:
          identifier: Microsoft.OpenSSH.Beta
          version: ${{ steps.extract_version.outputs.version }}
          token: ${{ secrets.WINGET_TOKEN }}
          fork-user: pwshBot
ðŸ“„
Hello, let's analyze your GitHub Actions workflow and provide the blog post you requested.
GitHub Actions Workflow Analysis
The provided YAML defines a GitHub Actions workflow named "Publish to WinGet." Let's break down its key elements:
 * Triggers:
   * on: release: types: [released]: This workflow is triggered automatically when a new release is published in your repository.
   * on: workflow_dispatch: Additionally, you can manually trigger this workflow using the "Run workflow" button in the GitHub Actions interface.
 * Job: publish:
   * runs-on: ubuntu-latest: The job executes on an Ubuntu Linux virtual machine.
   * permissions: read-all: Grants the workflow read access to all repository data.
 * Steps:
   * Extract version from tag: This step extracts the version number from the release tag (e.g., "v1.2.3" becomes "1.2.3") and stores it in an output variable named "version."
   * uses: vedantmgoyal9/winget-releaser@b87a066d9e624db1394edcd947f8c4e5a7e30cd7:
     * This step utilizes the "winget-releaser" GitHub Action.
     * It publishes a new release of your application (identified by "Microsoft.OpenSSH.Beta") to the Windows Package Manager (WinGet) repository.
     * version: The version extracted in the previous step.
     * token: A secret token with necessary permissions to interact with the WinGet repository (stored in your repository's secrets).
     * fork-user: Specifies "pwshBot" as the user or organization that owns the fork of the WinGet repository where changes will be pushed.
Blog Post
Title: "Automating WinGet Releases with GitHub Actions: A Streamlined Approach"
Response:
In today's fast-paced software development world, efficient release management is crucial. Manually publishing updates to package managers like WinGet can be tedious and error-prone.
We've embraced automation to simplify our WinGet release process. Leveraging GitHub Actions, we've set up a streamlined workflow that automatically publishes new releases of our "Microsoft.OpenSSH.Beta" application to the WinGet repository whenever a new release is created on GitHub.
This workflow extracts the version number from the release tag, ensuring accurate package information. It utilizes the powerful "winget-releaser" action to handle the submission process, including creating or updating the necessary manifests and submitting pull requests to the WinGet repository.
By automating WinGet releases, we save valuable time, reduce the risk of human error, and ensure that our users have access to the latest versions of our software through the Windows Package Manager.
Select topics:
 * Automation
 * DevOps
 * WinGet
 * GitHub Actions
Tag your post:
#WinGet #GitHubActions #Automation #ReleaseManagement
Note: Feel free to modify or expand on the blog post to align with your specific project and style.
Let me know if you have any further requests or modifications!
